
name: 'Terraform to apply VMs'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{secrets.AZURE_AD_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_AD_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
  ARM_ACCESS_KEY_ID: ${{secrets.AZURE_ACCESS_KEY_ID}}
  ROOT_PATH: '${{ github.workspace }}/src/terraform'

jobs:
  Terraform_Plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{secrets.GITHUB_TOKEN}}

  # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}

      # Generates an execution plan for Terraform
    - name: Terraform plan
      run: terraform plan
      working-directory: ${{env.ROOT_PATH}}

  Terraform_Apply:
        name: 'Terraform Apply'
        runs-on: ubuntu-latest
        needs: [Terraform_Plan]
        environment: Production

        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
          run:
            shell: bash
    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3
    
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{secrets.GITHUB_TOKEN}}
    
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: terraform init
          working-directory: ${{env.ROOT_PATH}}
    
          # Generates an execution plan for Terraform
        - name: Terraform Apply
          run: terraform apply --auto-approve
          working-directory: ${{env.ROOT_PATH}}




